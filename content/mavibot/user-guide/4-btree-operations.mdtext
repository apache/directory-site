Title: 4 - Mavibot B-tree operations
NavUp: ../user-guide.html
NavUpText: User Guide
NavNext: 5-btree-informations.html
NavNextText: 5 - Mavibot B-tree information
NavPrev: 3-btree-management.html
NavPrevText: 3 - Mavibot B-tree management
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 4 - Mavibot B-tree operations

We will now list all the possible operations that can be applied on a **B-tree**. But first, let us understand the _Cursor_ interface, as it is used for navigating a **B-tree** using various types of _browse_ operations.

## 4.1 The Cursor interface

All the _browse_ operations will return a _Cursor_ instance. A _Cursor_ allows navigating forward and backward on a **B-tree**. It starts at a specific position, and can be moved to a specific position too. The default position for a _Cursor_ is before the very first element of the **B-tree**

<DIV class="note" markdown="1">
It is important to understand that a <b>Cursor</b> returns tuples, not keys. A Key may be associated with many values, so a cursor may return many tuples with a given key (each one will have a different value though).
</DIV>

Here is the **B-tree** sample we will use for the following examples :

![Sample B-tree](images/ug-btree-sample.png)


### 4.1.1 Cursor position management

#### 4.1.1.1 afterLast

Moves the current position after the last element (last key and last value). The following schema shows the new position of the pointer after having called the _afterLast()_ method :

![After Last](images/ug-btree-after-last.png)

As we can see, we are not pointing at any key.


#### 4.1.1.2 beforeFirst

Moves the current position before the first element (first key and first value). The following schema shows the new position of the pointer after having called the _beforeFirst()_ method :

![Before First](images/ug-btree-before-first.png)

In this case also cursor is not stationed at any key.

### 4.1.2 Cursor operations

When a cursor is used to browse Tuples it may return many tuples with the same key but different value, when used to browse keys a 
single tuple will be returned for each key with the value of the key (when multiple values are present only the first value will be
returned).

#### 4.1.2.1 hasNext

Tells if there is a next available tuple. This will always be true if we are before the first tuple, and always false if we are on the last tuple or after the last tuple. The following picture shows the returned value for calls in various cases :

![Has Next](images/ug-btree-has-next.png)


#### 4.1.2.2 hasPrev

Returns true if there is a tuple available before the current tuple. The following picture shows the returned value for calls in various cases :

![Has Next](images/ug-btree-has-prev.png)

#### 4.1.2.3 next

Moves to the next value of the current key or to the next key if all the values of the current key have been processed, and return the associated tuple.

#### 4.1.2.4 prev

Moves to the previous value of the current key or to the previous key if all the values of the current key have been processed, and return the associated tuple.

## 4.1 Browse Operations

Now that we know what a _Cursor_ is about, we can describe the various _browse_ operations that can be applied on a _BTree_.

### 4.1.1 BTree.browse()

This method returns a cursor with the position set before the first element of the **B-tree**, for the current revision. It returns a _TupleCursor_ that contain the tuples <key,value> present in the _Btree_.

Assuming you have an existing _BTree_, using this method is quite straigthforward. Here is an example with a persisted _BTree_  :

        // Create a RecordManager that will contain the BTree
        RecordManager recordManager = new RecordManager( "Test.db" );

        // Create a BTree to play with
        BTree<Long, String> btree = recordManager.addBTree( "test", LongSerializer.INSTANCE, StringSerializer.INSTANCE, true );

        // Inject some data
        btree.insert( 1L, "1" );
        btree.insert( 4L, "4" );
        btree.insert( 2L, "2" );
        btree.insert( 3L, "3" );
        btree.insert( 5L, "5" );

        // Create the cursor
        TupleCursor<Long, String> cursor = btree.browse();

        // Set the cursor at the beginning of the BTree
        cursor.beforeFirst();

        // Get the tuples
        // Create the cursor
        TupleCursor<Long, String> cursor = btree.browse();

        // Move forward
        while ( cursor.hasNext() )
        {
            Tuple<Long, String> tuple = cursor.next();
            System.out.println( tuple );
        }

        ...

will produce this output :

    <1,1>
    <2,2>
    <3,3>
    <4,4>
    <5,5>

### 4.1.2 BTree.browse( long )

This method returns a cursor with the position set before the first element of the **B-tree**, for the given revision. 

Here, the big difference is that you can fetch some data from an older revision - assuming this revision is still present, of course -.

It returns a _TupleCursor_ that contain the tuples <key,value> present in the _Btree_.

You can use the exact same code than for the _browse()_ method, except that you have to pass the version you want to browse.

### 4.1.3 BTree.browseFrom( K key )

This method returns a cursor with the position set before the given key of the **B-tree**. If the key does not exist, the cursor will be set to the closest lower value (or upper value if it's lower than the lowest value)

It returns a _TupleCursor_ that contain the tuples <key,value> present in the _Btree_.

You can use the exact same code than for the _browse()_ method. Here is an example, where we start after the latest present key :

        // Inject some data
        for ( long i = 0; i <= 1000L; i += 2 )
        {
            btree.insert( i, Long.toString( i ) );
        }

        // Create the cursor
        TupleCursor<Long, String> cursor = btree.browseFrom( 1500L );
        
        assertFalse( cursor.hasNext() );
        assertTrue( cursor.hasPrev() );
        assertEquals( 1000L, cursor.prev().getKey().longValue() );

### 4.1.4 BTree.browseFrom( long revision, K key )
TODO

## 4.2 Contains Operations

### 4.2.1 BTree.contains( K key, V value )
TODO

### 4.2.2 BTree.contains( long revision, K key, V value )
TODO

## 4.3 Has Operations

### 4.3.1 BTree.hasKey( K key )
TODO

### 4.3.2 BTree.hasKey( long revision, K key )
TODO

## 4.4 Get Operations

### 4.4.1 BTree.get( K key )
TODO

### 4.4.2 BTree.get( long revision, K key )
TODO

### 4.4.3 BTree.getValues( K key )
TODO

## 4.5 Insert Operation

## 4.6 Delete Operations

### 4.6.1 BTree.delete( K key )
TODO

### 4.6.2 BTree.delete( K key, V value )
TODO


## 4.7 Other BTree operations

### 4.7.1 BTree.close()
TODO

### 4.7.2 BTree.flush()
TODO

### 4.7.3 BTree.getRevision()
TODO


