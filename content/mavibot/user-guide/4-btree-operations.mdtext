Title: 4 - BTree operations
NavUp: ../user-guide.html
NavUpText: User Guide
NavNext: 5-btree-informations.html
NavNextText: 5 - BTree information
NavPrev: 3-btree-management.html
NavPrevText: 3 - BTree management
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 4 - BTree operations

We will now list all the possible operations that can be applied on a **BTree**. But first, let's introduce the _Cursor_ interface, as it's used by all the _browse_ operation.

## 4.1 The Cursor interface

All the browse operations will return a _Cursor_ instance. A _Cursor_ allows one to move forward and backward on a **BTree**. It starts at a specific position, and can be moved to a specific position too. The default position for a _Cursor_ is before the very first element of the **BTree**

<DIV class="note" markdown="1">
It's important to understand that a <b>Cursor</b> returns tuples, not keys. A Key may be associated to many values, so a cursor may return many tuples with a given key (each one will have a different value though).
</DIV>

Here is the **BTree** sample we will use for the following examples :

![Sample BTree](images/ug-btree-sample.png)


### 4.1.1 Cursor position management

#### 4.1.1.1 afterLast() 

Moves the current position after the last element (last key and last value). The following schema shows 



#### 4.1.1.2 beforeFirst() : move the current position before the first element (first key and first value)

### 4.1.2 Cursor operations

We have to sets of methods depending on the elements we are browsing : tuples or keys.

#### 4.1.2.1 Browsing tuples

* hasNext() : tells if there is a next available tuple
* hasPrev() : tells if there is a previous available tuple
* next() : move to the next value, or to the next key if all the values have been processed, and return the associated tuple
* prev() : move to the previous value, or to the next key if all the values have been processed, and return the associated tuple

#### 4.1.2.1 Browsing keys
* hasNextKey() : tells if there is a next available key
* hasPrevKey() : tells if there is a previous available key
* nextKey() : move to the next key, even if we have more values to process
* prevKey() : move to the previous key, even if we have more values to process

## 4.1 Browse Operations

Now that we know what the _Cursor_ is about, we can describe the various _browse_ operations.

### 4.1.1 browse()

This method returns a cursor wich position will be set before the first key in the **BTree**. 

