Title: 5.1 - SSL
NavPrev: 5-ldap-security.html
NavPrevText: 5 - LDAP Security
NavUp: 5-ldap-security.html
NavUpText: 5 - LDAP Security
NavNext: 5.2-start-tls.html
NavNextText: 5.2 - StartTLS
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 5.1 - SSL

**LDAP** supports **SSL**, it's called **LDAPS**, and it uses a dedicated port. As of today, and since 2000, **LDAPS** is deprecated and **StartTLS** should be used.

That being said, many servers accept **LDAPS**, and the Apache LDAP API supports it.

## How does it work ?

The **SSL** protocol ensures that data are transmitted encrypted, and guarantees that the data being received are valid. Nobody can capture those data and read them, assuming the ciphers being used are strong enough.

With **SSL**, a dialog between the client and the server occurs, and when both part agree on the cipher to use, then all subsequent data is encrypted. This dialog may include a mutual validation. 

## Protocols

There are many version that can be used, but the idea is to use tha most recent one, if the server supports it. In any case, as we depend on **Java**, we are also limited by the supported version on the client side. Here are all the existing version, and their status :

| SSLversion | Java 7 Client | Java 7 Server | Java 8 Client | Java 8 Server |
|---|---|---|---|---|
| 2.0 | N/A | N/A | N/A | N/A |
| 3.0 | Disabled | Disabled | N/A | N/A |
| 3.1 (aka TLSv1) | **Enabled** | **Enabled** | **Enabled** | **Enabled** |
| 3.2 (aka TLSv1.1 | Disabled | **Enabled** | **Enabled** | **Enabled** |
| 3.3 (aka TLSv1.2) | Disabled | **Enabled** | **Enabled** | **Enabled** |

(_Disabled_ mean it's not active by default, and must be activated explicitely).

The default is for Java to pick the one that fits, assuming that it will always start with the newest version (**TLSv1.2**).

Still, you can enforce the version if needed.

## A quick primer

Here is all what you need to get a **LDAPS** connection established with a server :

        try ( LdapConnection connection = new LdapNetworkConnection( "server-name", 636, true ) )
        {
            connection.bind( "uid=admin,ou=system", "secret" );

            assertTrue( connection.isAuthenticated() );
        }

This is as simple as that ! The **636* port is the default **LDAPS** port for standard **LDAP** servers, when running as **root**, and for **ApacheDS** you will have to pick **10636**. The **true** flag is set to secure the connection. You don't need to close the connection, it will be done automatically when exiting the try{...} block.

By default, the selected protocol is **TLS**, and we wont verify the server's certificate.

## A more sophisticated sample

It's possible to have more control on the **SSL** configuration, and specifically to provide a specific **TrustManager** :

        try ( LdapConnection connection = new LdapNetworkConnection( Network.LOOPBACK_HOSTNAME, getLdapServer().getPortSSL(), new NoVerificationTrustManager() ) )
        {
            connection.bind( "uid=admin,ou=system", "secret" );
            
            assertTrue( ((LdapNetworkConnection)connection).getConfig().isUseSsl() );
            assertTrue( connection.isAuthenticated() );
        }

Here, we use the _NoVerificationTrustManager_ class, but you can define your own implementation. The **Fortress** project is using [this class](https://github.com/apache/directory-fortress-core/blob/master/src/main/java/org/apache/directory/fortress/core/ldap/LdapClientTrustStoreManager.java).

## Using a configuration

One step further : you can define a dediated configuration that is passed to the constructor. Many parameters can be defined :

* the enabled cipher suites
* the enabled protocols
* the KeyManager instances
* the SecureRandom instance
* the SSL protocol to use
* the TrustManager instances

All those parameters are configured using the _LdapConnectionConfig_ class :

        LdapConnectionConfig sslConfig = new LdapConnectionConfig();
        sslConfig.setLdapHost( Network.LOOPBACK_HOSTNAME );
        sslConfig.setUseSsl( true );
        sslConfig.setLdapPort( getLdapServer().getPortSSL() );
        sslConfig.setTrustManagers( new NoVerificationTrustManager() );

        try ( LdapConnection connection = new LdapNetworkConnection( sslConfig ) )
        {
            connection.bind( "uid=admin,ou=system", "secret" );
            
            assertTrue( ((LdapNetworkConnection)connection).getConfig().isUseSsl() );
            assertTrue( connection.isAuthenticated() );
        }


