Title: 6.1 - AdministrativePoint
NavPrev: 6-ldap-data-structures.html
NavPrevText: 6 - LDAP data structures
NavUp: 6-ldap-data-structures.html
NavUpText: 6 - LDAP data structures
NavNext: 6.2-administrative-role.html
NavNextText: 6.2 - AdministrativeRole
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 6.1 - AdministrativePoint

<DIV class="warn" markdown="1">
Those classes are currently only used by the server. It will be available on the client side later on.
</DIV>

And _AdministrativePoint_ is an _entry_ in the _DIT_ which is associated with some _AdministrativeArea_. In **ApacheDS** we support 4 different kind of roles :
    * ACI
    * Collective Attributes
    * SubSchema
    * Triggers

We also have three different kind of _AdministrativePoint_ :

    * Autonomous AdministrativePoint (AAP)
    * Specific AdministrativePoint (SAP)
    * Inner AdministrativePoint (IAP)

Each of the roles will come in one of the 3 'flavors' (except the SubSchema whch has only 2 flavors). So we have the following classes :

    * AccessControl
        * AccessControlAAP
        * AccessControlSAP
        * AccessControlIAP
    * CollectiveAttribute
        * CollectiveAttributeAAP
        * CollectiveAttributeSAP
        * CollectiveAttributeIAP
    * Subschema
        * SubschemaAAP
        * SubschemaSAP
    * Triggers
        * TriggerExecutionAAP
        * TriggerExecutionSAP
        * TriggerExecutionIAP

Any of those classes stores the following informations :

    * dn : The DN of the root entry for this administration point.
    * uuid : The associated entryUUID
    * role : The Administrative role
    * parent : The parent (if any) AdministrativePoint
    * children : All the descendant of this AdministrativePoint

Those classes are mainly used when one want to create a