Title: 2.6 - Modifying entries
NavPrev: 2.5-deleting.html
NavPrevText: 2.5 - Deleting entries
NavUp: 2-basic-ldap-api-usage.html
NavUpText: 2 - Basic LDAP API usage
NavNext: 2.7-moving-renaming.html
NavNextText: 2.7 - Moving an renaming entries
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 2.6 - Modifying entries

There are several ways an entry can be modified. Mainly, it's about adding or deleting an attribute, or it's about modifying the values associated with an existing attribute.

It's important to understand that many modifications can be applied on a single entry. All those modifications will be applied in a all or none fashion. For instance, if any of the modifications is invalid, then none of the modifications will be applied. Also if the server crashes while applying the modifications, it's guaranteed that the entry will remain consistent.

## How it works ?

Each modification to be applied on an entry is encapsulated in an intermediate class : a _Modification_ instance, which can be created as :

    :::Java
    Modification addedGivenName = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "givenName", "John", "Peter" );

Here, the modification instance represents addition of values "John" and "Peter" to the _giveName_ attribute (the _givenName_ attribute can have more than one value).

There are three different kind of modifications :

* ModificationOperation.ADD_ATTRIBUTE : add an attribute and values to an entry
* ModificationOperation.REMOVE_ATTRIBUTE : remove an attribute and values from an entry
* ModificationOperation.REPLACE_ATTRIBUTE : replace some existing values from an entry

## Adding or removing full attributes

The two following operations are dealing with complete addition or removal of attributes.

### Adding new attributes

First of all, let's see how we proceed when it comes to adding an attribute. You need to know the entry you want to modify, which means you have to know its Dn. Then, you have to create the _Modification_ instance that will be applied on the entry. Here is the code that is used to add a _givenName_ attribute to an existing entry :

    :::Java
    ...
    Modification addedGivenName = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "givenName",
        "John", "Peter" );

    connection.modify( "uid=Doe,dc=acme,dc=com", addedGivenName );
    ...

#### Adding more than one attribute

What if you want to apply more than one modification to the entry ?

Easy : create more than one _Modification_ instance, and add them before calling the _modify_ method :

    :::Java
    ...
    Modification addedGivenName = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "givenName",
        "John", "Peter" );
    Modification addedInitials = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "initials",
        "JD" );

    connection.modify( "uid=Doe,dc=acme,dc=com", addedGivenName, addedInitials );
    ...

You can add as many _Modification_ instances as needed.

#### Errors

If you try to add an attribute that already exists, you will get an error, like this one :

    :::Java
    ...
    Modification addedGivenName = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "givenName",
        "John", "Peter" );
    Modification addedUid = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "uid",
        "Ted" );

    connection.modify( "uid=Doe,dc=acme,dc=com", addedGivenName, addedUid );
    ...

results in : 

    :::Java
    org.apache.directory.api.ldap.model.exception.LdapAttributeInUseException: ATTRIBUTE_OR_VALUE_EXISTS: failed for MessageType : MODIFY_REQUEST
    Message ID : 3
        Modify Request
            Object : 'uid=Doe,dc=acme,dc=com'
                Modification[0]
                    Operation :  add
                    Modification
                        givenName: John
                        givenName: Peter            
                Modification[1]
                    Operation :  add
                    Modification
                        uid: Ted
    org.apache.directory.api.ldap.model.message.ModifyRequestImpl@13532916: ERR_54 Cannot add a value which is already present : admin
    at org.apache.directory.api.ldap.model.message.ResultCodeEnum.processResponse(ResultCodeEnum.java:2064)
    at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2300)
    at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2309)
    ...

Here, we have tried to add the _uid_ attribute which already exists, and the error trace says so
as expected.

Anothe potential error you can get is when you try to add an attribute that is not allowed in an entry. This can be because the Entry's ObjectClass does not allow such an attribute, or because the server forbid you to modify the entry, due to the ACIs applied on this entry.

Last, not least, but this is quite obvious, the entry *must* exist !

### Removing an attribute

Removing an attribute is actually a bit simpler than adding an attribute, as you don't have to specify the values of the attribute to remove. Here is an example where we will remove the _giveName_ attrinute from an entry :


    :::Java
    ...
    Modification deletedGivenName = new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE, "givenName" );

    connection.modify( "uid=Doe,dc=acme,dc=com", adeletedivenName );
    ...

Here, we have created a modification, specifying that the _givenName_ attribute has to be removed, and we applied the modification on the entry.

Again, you can delete more than one attribute from an entry, it's just a matter of creating more than one _Modification_ instances and applying them to the entry.

#### Errors

If you try to delete an attribute that does not exist in the entry, you will get this error :

    :::Java
    org.apache.directory.api.ldap.model.exception.LdapNoSuchAttributeException: NO_SUCH_ATTRIBUTE: failed for MessageType : MODIFY_REQUEST
    Message ID : 3
        Modify Request
            Object : 'uid=admin,ou=system'
                Modification[0]
                    Operation :  delete
                    Modification
                        givenName: (null)
    org.apache.directory.api.ldap.model.message.ModifyRequestImpl@fbe6f598: ERR_55 Trying to remove an non-existant attribute: 
    attributetype ( 2.5.4.42 NAME ( 'givenName' 'gn' )
        DESC 'RFC2256: first name(s) for which the entity is known by'
        SUP name
        EQUALITY caseIgnoreMatch
        SUBSTR caseIgnoreSubstringsMatch
        SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
        USAGE userApplications
    )
        at org.apache.directory.api.ldap.model.message.ResultCodeEnum.processResponse(ResultCodeEnum.java:2057)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2300)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2309)
        at org.apache.directory.shared.client.api.operations.ClientModifyRequestTest.testModifyRemoveAttribute(ClientModifyRequestTest.java:302)


Here, the entry does not contain the _givenName_ attribute.

Anothe potential error you can get is when you try to remove an attribute which is a mandatory attribute, per the entry's ObjectClass constraints.

Otherwise, the server might forbid you to modify the entry, due to the ACIs that are applicable to this entry.

Again the entry *must* exist before performing a modification!

## Adding, removing or replacing attribute values

You can now update an attribute's values themselves, atomically, instead of removing a full attribute, and add it back but with updated values. We use the exact same _Modification_ instance, with the same three _ModificationOperation_, except that the semantics slightly differ.

Typically, here is what happens when you use one of the three _ModificationOperation_ on an attribute :

* ModificationOperation.ADD_ATTRIBUTE : add values to an attribute. If the Attribute does not exist, it will be added
* ModificationOperation.REMOVE_ATTRIBUTE : remove values from an attribute.
* ModificationOperation.REPLACE_ATTRIBUTE : replace all the values from an attribute by the provided new values

### Add values

Let's see with the addition of values. Here, we will assume we have an entry like :

    dn: uid=jDoe,dc=acme,dc=com
    objectClass: person
    objectClass: organizationalPerson
    objectClass: inetOrgPerson
    uid: jDoe
    userPassword: secret
    sn: John Tom Doe
    cn: Doe
    givenName: John

We will add the 'Tom' given name to the _givenName_ attribute in this entry :

    :::Java
    ...
    Modification addedGivenNameValue = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, "givenName", "Tom" );

    connection.modify( "uid=Doe,dc=acme,dc=com", addedGivenNameValue );
    ...

The entry now has two values for th _giveName_ attribute :

    dn: uid=jDoe,dc=acme,dc=com
    objectClass: person
    objectClass: organizationalPerson
    objectClass: inetOrgPerson
    uid: jDoe
    userPassword: secret
    sn: John Tom Doe
    cn: Doe
    givenName: John
    givenName: Tom


#### Errors

Again, such an operation might fail for many reasons. Let's see what are the possible errors :

First, the attribute's value already exists. You will get such an error :

    org.apache.directory.api.ldap.model.exception.LdapAttributeInUseException: ATTRIBUTE_OR_VALUE_EXISTS: failed for MessageType : 
    MODIFY_REQUEST
    Message ID : 5
        Modify Request
            Object : 'uid=admin,ou=system'
                Modification[0]
                    Operation :  add
                    Modification
                        givenName: John
    org.apache.directory.api.ldap.model.message.ModifyRequestImpl@867e79fe: ERR_54 Cannot add a value which is already present : John
        at org.apache.directory.api.ldap.model.message.ResultCodeEnum.processResponse(ResultCodeEnum.java:2064)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2300)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2309)
        at org.apache.directory.shared.client.api.operations.ClientModifyRequestTest.testModifyRemoveAttribute(ClientModifyRequestTest.java:303)

Note that depending on the attribute's syntax, you may get such an error because you tried to enter a value with different casing when the syntax is case-insensitive. Typically, if the attribute contains the value 'John' and you try to add the value 'JOHN', you will get this very same error message. Be sure you know wht the attribute syntax allows you to do...

Second, the attribute is single valued : it's not possible to add a second value in the Attribute. You'll get the following error message :

    org.apache.directory.api.ldap.model.exception.LdapInvalidAttributeValueException: CONSTRAINT_VIOLATION: failed for MessageType : MODIFY_REQUEST
    Message ID : 3
        Modify Request
            Object : 'c=FR,ou=users,ou=system'
                Modification[0]
                    Operation :  add
                    Modification
                        c: US
    org.apache.directory.api.ldap.model.message.ModifyRequestImpl@cdf2ed2f: ERR_278 More than one value has been provided for the single-valued attribute: c
        at org.apache.directory.api.ldap.model.message.ResultCodeEnum.processResponse(ResultCodeEnum.java:2127)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2300)
        at org.apache.directory.ldap.client.api.LdapNetworkConnection.modify(LdapNetworkConnection.java:2309)
        at org.apache.directory.shared.client.api.operations.ClientModifyRequestTest.testModifyRemoveAttribute(ClientModifyRequestTest.java:297)

Third, the ACIs you have set on the server may not allow you to update an entry or an attribute.

### Remove values

TODO...
