Title: 4.1 - Schema Manager
NavPrev: 4-schema-management.html
NavPrevText: 4 - Schema Management
NavUp: 4-schema-management.html
NavUpText: 4 - Schema Management
NavNext: 4.1.1-schema-manager-introduction..html
NavNextText: 4.1.1 - Introduction
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 4.1 - Schema Manager

The API and the ApacheDS server have to keep the schema elements available. This is done through what we call the **SchemaManager**. It hides all the internal structure from the users.


## Contents

* [Introduction](4.1.1-schema-manager-introduction.html)
* [SchemaObject](4.1.2-schema-object.html)
  * [AttributeTypes](4.1.2.1-attribute-types.html)
  * [ObjectClasses](4.1.2.2-object-classes.html)
  * [Syntaxes](4.1.2.3-syntaxes.html)
  * [MatchingRules](4.1.2.4-matching-rules.html)
  * [DITContentRules](4.1.2.5-dit-content-rules.html)
  * [DITStructureRules](4.1.2.6-dit-structure-rules.html)
  * [MatchingRuleUses](4.1.2.7-matching-rule-uses.html)
  * [NameForms](4.1.2.8-name-forms.html)
  * [ApacheDS Schema Elements](4.1.2.9-apacheds-schema-elements.html)
* [Registries](4.1.3-registries.html)
* [SchemaLoader](4.1.4-schema-loader.html)

## Getting a SchemaManager

The very first thing when you want to have access to the schema elements is to access to the **SchemaManager**. This can be done in many ways :

* you can create one from scratch, and load it with the elements you want
* you can use a default **SchemaManager**, with some default schema elements
* you can create a **SchemaManager**, and load the schema elements from a destination
* last, not least - and probably the most interesting possibility -, you can connect to a LDAP server and load the schema from it.

We will show how to proceed in those four use cases.


## Using a SchemaManager

Let's first assume you have an instance of a **SchemaManager** (we will see later how to get such an instance). 


