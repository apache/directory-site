Title: 1.2 - LDAP in a few words
NavPrev: 1.1-java-and-ldap.html
NavPrevText: 1.1 - Java and LDAP
NavUp: 1-introduction.html
NavUpText: 1 - Introduction
NavNext: 1.3-apache-ldap-api-rational.html
NavNextText: 1.3 - The Apache LDAP API rational
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 1.2 - LDAP in a few words

**LDAP** is not a new technlology. It's been around since the 90's to mitigate **X.500** complexities. Its name is an acronym for **L**ightweight **D**irectory **A**ccess **P**rotocol. Soon after the first standard was issued, the first full *LDAP* server was created and X.500 became obsolete.

We'll use the term **LDAP** to represent the protocol and **LDAP** server to represent the server that implements it.

## Features
An **LDAP** server provides access to entries stored in a backend database. It provides a mechanism for fast searching and retrieval of entries. Its data structure is hierarchical, and uses a schema to manage the definition of the entry's data formats.

An **LDAP** client must first connect to a server and disconnect when finished. Some operations may be performed on the data itself, e.g. searches, modifications and deletions, along with a few others.

**LDAP** servers are extensible, but they all use a common protocol which makes it easy for users to request to interact with them. This API is an exemple of what **LDAP** is very good at : it access data in a fast way, across servers.

## Characteristics
**LDAP** servers are fast for retrievals : having been designed specifically for this purpose. But modifications can be costly. These characteristics must be understood when writing applications using an **LDAP** server for data storage.

Each entry is identified by a location within it's corresponding **D**irectory **I**nformation **T**ree, and we use what's called a **D**istinguished **N**ame (or **Dn**) to describe its address within it. The base entry, is known as the suffix, and all entries beneath it are collectively known as the **DIT**.

## Programming 

**LDAP** is a part of the **IT** landscape and so it's unavoidable that we must deal with it. **LDAP** servers are used to manage authentication, authorizations, demographic info and more. It's very likely that you will have to write some code to access data over **LDAP**, and existing **API**s aren't quite up to the task. This **LDAP API** has been designed to simplify usage.

## Going further

This was a very short introduction, there's more literature about **LDAP** on the web : [Wikipedia](http://en.wikipedia.org/wiki/LDAP) provides a good starting point.
