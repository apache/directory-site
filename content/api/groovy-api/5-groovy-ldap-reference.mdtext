Title: 5 - Groovy LDAP Reference
NavPrev: 4-groovy-ldap-building.html
NavPrevText: 4 - Groovy LDAP Building
NavUp: ../groovy-ldap.html
NavUpText: Groovy LDAP
NavNext: 6-groovy-ldap-origin.html
NavNextText: 6 - Groovy LDAP Origin
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

<h1>5 - Groovy LDAP Reference</h1>

[TOC]
## search

The _search_ method performs an LDAP search operation and returns the result as a list of entries. In Groovy LDAP, an entry is simply a map.

### Three options to call a search method

#### Short cut methods

For the most common types of search requests, the _LDAP_ class contains two direct methods.

    :::Java
    public List<Object> search( String filter ) throws NamingException
    public List<Object> search( String filter, String base, SearchScope scope ) throws NamingException

This example uses the second variant:

    :::Java
    ...
    ldap = LDAP.newInstance('ldap://zanzibar:10389/')

    results = ldap.search('(objectClass=person)', 'dc=example,dc=com', SearchScope.ONE)
    println " ${results.size} entries found ".center(40,'-')
    for (entry in results) {
      println entry.dn
    }
    ...

### Using a Search object

The class org.apache.directory.groovyldap.Search is a JavaBean which contains parameters for a search.

| Property name | Type | Default value | Description |
|---|---|---|---|
| _base_ | java.lang.String | "" | Search base |
| _scope_ | org.apache.directory.groovyldap.SearchScope | SearchScope.SUB (whole sub tree) | Search scope, one of BASE, ONE, SUB |
| _filter_ | java.lang.String |  "(objectClass=*)" (matches all entries) | filter expression |
| _filterArgs_ | java.lang.Object\[\] |  null | filter arguments |
| _attrs_ | java.lang.String\[\] |  null (all attributes) | returning attributes |

You can simply create an object of this class, adjust the attributes to your needs and call an appropriate search method from the _LDAP_ class with it. Here is an example:

    :::Java
    ...
    params = new Search()
    params.filter='(objectClass=person)'
    params.base='dc=example,dc=com'
    params.scope=SearchScope.ONE

    results = ldap.search(params)
    ...

#### Using map style syntax

A very handy way to call search operations is to use the expressive map style arguments. The same properties as described for the _Search_ class are supported. Here is an example.

    :::Java
    ...
    results = ldap.search(filter: '(objectClass=person)', 
        base: 'dc=example,dc=com', scope: 'ONE')
    ...

The order of arguments does not matter, and this variant is very descriptive, and therefore recommended to use.

### Using filter arguments

JNDI supports filter expressions with placeholders like \{0\}, \{1\} etc., and Groovy LDAP offers their use as well. 
Here is a simple example:

    :::Java
    ...
    params = new Search()
    params.filter='(&(objectClass={0})(cn={1}))'
    params.filterArgs=['person', 'Heather Nova']

    results = ldap.search(params)
    ...

It is possible to use this in map style as well.

### Specifying the attributes returned by a search

tbd.