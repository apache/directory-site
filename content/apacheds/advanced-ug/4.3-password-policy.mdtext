Title: 4.3. Password Policy
NavPrev: 4.2-authorization.html
NavPrevText: 4.2 - Authorization
NavUp: 4-authentication-and-authorization.html
NavPrevText: 4 - Authentication & Authorization
NavNext: 5-administration.html
NavNextTest: 5 - Administration
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 4.3. Password Policy

The **Password Policy** is a **[RFC](http://tools.ietf.org/html/draft-behera-ldap-password-policy-10)** draft that has been designed for the very first version in 1999, and the latest version is from 2009. Although it's still a draft, and it's currently noted as inactive, it has been implemented by many existing **LDAP** servers.

**ApacheDS** implements most the draft.

<DIV class="warning" markdown="1">
Enforcing a strict passowrd policy is extremely punitive to users. It may leads users to workaround the policy by storing their password in a postit, an workaround that will defeat any password policy...

Always try to think about better alternatives than force users to always define password with 10 or more characters, including numbers, upper and lower case, special chars, and to change it every month...

A long sentence (4 or 5 words), like "The horse has won the race three time" is most certainly a better passowrd than any other combinaison, and is easy to remember...
</DIV>


## What is a password policy ?

As explained on [wikipedia](http://en.wikipedia.org/wiki/Password_policy) :

	:::Text
	A password policy is a set of rules designed to enhance computer security by encouraging users to employ strong passwords 
	and use them properly.

Basically, the system, once activated, will enforce some rules and check the password strength. We will list the various options in this chapter.

There are different aspects to consider :

	* The password check when it's added or modified
	* The password management when the user bind, in other words, it's life cycle
	* The password protection against attacks

Those aspects are exposed in the following paragraphs.


## How do we configure it ?

The _PasswordPolicy_ can be configured in two ways. First of all, it's important to know that it's activated by default. let's see the default configuration first.

There is an entry contianing all the default values for the _PasswordPolicy_, under :

	* ou=config
		* ads-directoryServiceId=<default>
			* ou=interceptors
				* ads-interceptorId=authenticationInterceptor
					* ou=passwordPolicies

This entry contains the following values :

| Attrinbte | Default value | Comment |
|---|---|---|
| ads-pwdAllowUserChange | TRUE | tells if the user can change its password |
| ads-pwdCheckQuality | 1 | The kind of quality we wnt for the password (0, 1, or 2) |
| ads-pwdExpireWarning | 600 |  |
| ads-pwdFailureCountInterval | 30 | The duration of failure logs we keep in the entry |
| ads-pwdGraceAuthnLimit | 5 |  |
| ads-pwdGraceExpire | 0 |  |
| ads-pwdInHistory | 5 | The number of passwords we keep in the password history |
| ads-pwdLockout | TRUE | Tells if the password should be locked or not on failures |
| ads-pwdLockoutDuration | 0 | The delay we wait before allowing a new attept when the password hs been locked |
| ads-pwdMaxAge | 0 |  |
| ads-pwdMaxDelay | 0 | The maximum we wait before sending the BindResponse |
| ads-pwdMaxFailure | 5 | The maximum number of failure we accept before locking the password |
| ads-pwdMaxIdle | 0 |  |
| ads-pwdMaxLength | 0 |  |
| ads-pwdMinAge | 0 | The delay between two password changes |
| ads-pwdMinDelay | 0 | The minimum we wait before sending the BindResponse |
| ads-pwdMinLength | 5 |  |
| ads-pwdMustChange | FALSE |  |
| ads-pwdSafeModify | FALSE |  |

Here is the entry :

	:::Text
	dn: ads-pwdId=default,ou=passwordPolicies,ads-interceptorId=authenticationIn
	 terceptor,ou=interceptors,ads-directoryServiceId=default,ou=config
	objectclass: top
	objectclass: ads-base
	objectclass: ads-passwordPolicy
	ads-pwdAttribute: userPassword
	ads-pwdId: default
	ads-enabled: TRUE
	ads-pwdAllowUserChange: TRUE
	ads-pwdCheckQuality: 1
	ads-pwdExpireWarning: 600
	ads-pwdFailureCountInterval: 30
	ads-pwdGraceAuthnLimit: 5
	ads-pwdGraceExpire: 0
	ads-pwdInHistory: 5
	ads-pwdLockout: TRUE
	ads-pwdLockoutDuration: 0
	ads-pwdMaxAge: 0
	ads-pwdMaxDelay: 0
	ads-pwdMaxFailure: 5
	ads-pwdMaxIdle: 0
	ads-pwdMaxLength: 0
	ads-pwdMinAge: 0
	ads-pwdMinDelay: 0
	ads-pwdMinLength: 5
	ads-pwdMustChange: FALSE
	ads-pwdSafeModify: FALSE


#### Enabling/Disabling the PasswordPolicy

The _PasswordPolicy_ is enabled by default. It's possible to disable it by setting the _ads-enabled_ value to FALSE, with a server restart.

## Password protection

This part is exposing the various technics the system uses to protect your password from an attack.

### Password guessing limit

The idea is to protect the password against multiple guess attempts. The following rules are applied :

	* a counter track the failed attemps, and block when it's reached
	* an incremental delay is added after a failure before a new attempt can be done
	* a global delay for all the failed attempt is used, when reached, the account is blocked
	
When the account is locked, it can remain locked, or be unlocked after a grace period.

#### Attempts counter

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdLockout, ads-pwdMaxFailure, ads-pwdLockoutDuration
</DIV>

Each failed attempt will be logged in the entry, in the _ads-pwdFailureTime_ Attribute (it will contain the date of the attempt). When the Attribute contains more values than the maximum number of failed attempts, the entry will be locked (the _ads-pwdAccountLockedTime_ Attribute will contain the date the entry has been locked).

<DIV class="warning" markdown="1">
In order to activate this control the ads-pwdLockout parameter must be set to TRUE.
</DIV>

The following table expose the various possible cases, with three failed attempts : 

| _ads-pwdmaxfailure_ | _ads-pwdLockout_ | _ads-pwdFailureTime_ | _ads-pwdAccountLockedTime_ | Locked | Comment |
|---|---|---|---|---|---|
| 3 | true | date1 | - | No | Failure 1 |
|  |  | date1, date2 | - | No | Failure 2 |
|  |  | date1, date2, date3 | date3 | Yes | Failure 3 : account locked |
| 3 | false | date1 | - | No | Failure 1 |
|  |  | date1, date2 | - | No | Failure 2 |
|  |  | date1, date2, date3 | - | No | Failure 3 |

As we can see, the account is locked only when we reach the number of failure, and the _ads-pwdLockout_ flag is TRUE. If the _ads-pwdLockoutDuration_ flag is set, then the password will remain locked for the delay stored in this attribute.

#### Delayed login

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdLockout, ads-pwdMaxFailure, ads-pwdLockoutDuration
</DIV>

When we have reached a number of failed attempt, the account will be locked. We can set another attribute to tell the server that the locked out account can be unlocked afer a delay : the _ads-pwdLockoutDuration_ Attribute stores this delay.

When the account is locked, no further attempt will succed, even if the correct password is sent. After the delay, the user will be unlocked.

#### Purging failures

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdFailureCountInterval
</DIV>

As we store all the failures withing the entry, at some point we may want to purge those failures. This is done either because we have successfully loged, or because the _ads-pwdFailureCountInterval_ value has expired. In this last case, all the failure older than the current time minus the set interval will be removed.


### Password checks and strength enforcement

Those rules are used to enforce some constraints on the password, so that weak passwords can't be used.

#### Quality Check policy

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdQualityCheck
Default value : 1
</DIV>

The system can be enabled or disabled, and when enabled, two different level of checks con be done : relaxed or strict. We use a parameter to specify the kind of check we do on the password : _ads-pwdCheckQuality_, which can take three values :

	* 0 : The password is not checked
	* 1 : We check the password when we can, ie when it's not hashed. When the password is hashed, or in a form that does not allow us to apply the checks, then we ignore the errors
	* 2 : The password is checked, and if it's hashed or in a form that does not allow the checks to be done, then the changes are rejected.

#### Password History

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdInHistory
</DIV>

The server can keep a backlog of passwords, so that a user can't keep a password for ever. When requested to do so the user will have to change his/her password, and the old password will be stored in the user's entry password history.

We can specify the number of passwords we keep in the password history by configuring the _ads-pwdInHistory_ attribute.

#### Minimum delay between modifications

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdMinAge
</DIV>

When the password history is activated, some users may change their passwords many times to get their old password out of the history, and add it as their password again.  Setting a delay between two password changes may protect the password against such action.

The _ads-pwdMinAge_ attribute is used for this purpose, and it keeps a value in seconds.

#### Password length constraint

<DIV class="info" markdown="1">
Impacted Attributes : ads-pwdMinLength and ads-pwdMaxLength
</DIV>

You can control the minimum and maximum length for a password by setting the _ads-pwdMinLength_ and _ads-pwdMaxLength_ attributes.

<DIV class="warning" markdown="1">
Setting a password max length is most certainly a waste of time. It's very likely that this parameter has been added to the specification for the sake of symetry...
</DIV>


### Password lifecycle management

We now have to expose the rules that apply to the password during it's life.