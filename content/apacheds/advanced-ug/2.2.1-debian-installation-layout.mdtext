Title: 2.2.1 - Debian Installation Layout
NavPrev: 2.2-installation-layout.html
NavPrevText: 2.2 - Installation Layout
NavUp: 2.2-installation-layout.html
NavUpText: 2.2 - Installation Layout
NavNext: 2.2.2-rpm-installation-layout.html
NavNextText: 2.2.2 - RPM Installation Layout
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 2.2.1 - ![debian](images/debian.png)Debian Installation Layout

When you installed ApacheDS on your debian machine, it created various directories on your disk. Typically, we need to store :

* the binaries
* the server configuration files
* the license files
* the dependencies

We will describe in this chapter the global layout and the various files and their meaning and use. 


## ![debian](images/debian.png) Debian Standard layout

On debian, the installation will be done in _/opt_, and the daemon script will be in _/etc/init.d_. Here are the created directories :

<PRE>
  /opt
    |
    +-- bin/
    |    |
    |    +-- apacheds*
    |    |
    |    +-- wrapper*
    |
    +-- conf/
    |    |
    |    +-- wrapper.conf
    |
    +-- lib/
    |    |
    |    +-- apacheds-service-<version>.jar
    |    |
    |    +-- apacheds-wrapper-<version>.jar
    |    |
    |    +-- libwrapper.so
    |    |
    |    +-- wrapper-3.2.3.jar
    |
    +-- NOTICE
    |
    +-- LICENSE
</PRE>

## ![debian](images/debian.png) Starting ther server

THere are three ways to start the server :

* as a daemon : in this case, the server is automatically started when the machine is started.
* starting the daemon from /etc/init.d manually
* starting the server from /opt/apacheds-<version>/bin

The most convenient is obviously to let the server starts _apacheDS_ automatically when the server is started. It's enough to launch this command once the installation has been done :

    $ sudo su
    $ cd /etc/init.d
    $ update-rc.d apacheds-2.0.0-M20-default defaults
    Adding system startup for /etc/init.d/apacheds-2.0.0-M20-default ...
    /etc/rc0.d/K20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc1.d/K20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc6.d/K20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc2.d/S20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc3.d/S20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc4.d/S20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default
    /etc/rc5.d/S20apacheds-2.0.0-M20-default -> ../init.d/apacheds-2.0.0-M20-default


Otherwise, starting the server using option 2 is all about typing this command line :

    $ sudo /etc/init.d/apacheds-2.0.0-M20-default start

This will start the default instance. Would you like to have more than one instance of the server installed, then you'll have to modify this script.


Starting the server using the _apacheds_ script requires that you provide a third parameter : the instance to run.

    $ sudo /opt/apacheds-2.0.0-M20/bin/apacheds start default

In any case, we start the _apacheds_ script, which strats the _wrapper_ executable, which itself starts the serveur.

### ![debian](images/debian.png) bin directory

The _bin_ directory contains the binary used to launch the server. The _apacheds_ script starts the _wrapper_ executable, using the configuration file _wrapper.conf_.

### ![debian](images/debian.png) conf directory

This directory contain the wrapper configuration file. This is a description of its content. The _%INSTANCE_DIRECTORY%_ parameter is taken from the _apacheds_ script, it refers to the isnance location. Out of all those parameters, it's likely that the one you may want to change is the _wrapper.java.maxmemory_ one, if needed.


| parameter | Description | Default value |
|---|---|---|
|wrapper.java.additional.1|The first parameter passed to the JVM|-Dlog4j.configuration=file:///%INSTANCE_DIRECTORY%/conf/log4j.properties|
|wrapper.java.additional.2|The _var_ directory|-Dapacheds.var.dir=%INSTANCE_DIRECTORY%|
|wrapper.java.additional.3|The _log_ directory|-Dapacheds.log.dir=%INSTANCE_DIRECTORY%/log|
|wrapper.java.additional.4|The _run_ directory|-Dapacheds.run.dir=%INSTANCE_DIRECTORY%/run|
|wrapper.java.additional.5|The server instance|-Dapacheds.instance=%INSTANCE%|
|wrapper.java.initmemory|The minimal memory to use|No default value|
|wrapper.java.maxmemory|The maximal memory to use|No default value|
|wrapper.java.maxmemory|The -Xmx JVM parameter|2048m|
|wrapper.console.loglevel|The wrapper log level|INFO|
|wrapper.logfile|The wrapper log file|%INSTANCE_DIRECTORY%/log/wrapper.log|
|wrapper.logfile.maxsize|The wrapper log maximal size|1m|
|wrapper.logfile.maxfiles|The number of wrapper log file we kep on disk|5|
|wrapper.ping.timeout|The delay after which we will consider the server as stalled|240s (4 mins)|
|wrapper.startup.timeout|The maximum delay allowed for the server to start|120 secs|


### ![debian](images/debian.png) lib directory

This directory contains the third party library the server needs. You should not have to change anything there.