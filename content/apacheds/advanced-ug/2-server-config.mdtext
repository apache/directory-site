Title: 2 - Server Configuration
NavPrev: 1-architecture.html
NavPrevText: 1 - Architecture
NavUp: ../advanced-users-guide.html
NavUpText: Advanced User Guide
NavNext: 3-admin-model.html
NavNextText: 3 - Administrative Model
Notice: Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at
    .
    http://www.apache.org/licenses/LICENSE-2.0
    .
    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

# 2 - Server Configuraion

We will now describe the server configuration. Usually, all the configuration is done using Apache Directory Studio, which offers a pretty GUI. One can also configure the server using LDAP request, as the configuration is stored in teh **DIT**. Otherwise, all the configuration modifications won't be applied on a started server : usually, you will have to restart the server in order to get those modifications applied.

It's a good policy not to modify the LDIF files by hand, but instead to use the Studio Configuration plugin to modify your configuration. 

## Overall structure

The configuration is stored in a hierarchical order, where sub-elements are related to their parent. For instance, the _Transports_ are associated to the _Server_ they are child of. If we have many kind of servers, we will have as many transports as we have servers.

The following hierarchy describe the different kind of elements that one can configure, and their relationship :

* [Directory Service](#directory-service)
	* [ChangeLog](#change-log)
	* [Journal](#journal)
	* [Interceptors](#interceptors)
		* [Authentication Interceptor](#authentication-Interceptor)
			* [Authenticators](#authenticators)
			* [Password Policies](#password-policies)
	* [Partitions](#partitions)
		* [Indexes](#indexes)
			* [Indexed Attribute](#indexed-attribute)
	* [Servers](#servers)
		* [Ldap Server](#ldap-server)
    		* [Transports](#transports)
    		* [ReplConsumers](#repl-consumers)
    		* [Extended Operation Handlers](#extended-op-handlers)
    		* [SASL Mechanisms](#sasl-mechanisms)
		* [Kerberos Server](#kerberos-server)
    		* [Transports](#transports)
		* [Http Server](#http-server)
    		* [Transports](#transports)
    		* [HttpWebApps](#http-web-apps)
		* [ChangePassword Server](#change-password-server)
    		* [Transports](#transports)

We will now explain each one of those elements.

### Directory Service

<DIV class="note" markdown="1">
Note that bold attributes are mandatory
</DIV>

This is the key of the whole server : the place where we store the data. Most of the servers are depending on this component. You maye have more than one server, but only one _DirectoryService_. This compoent itself refers to the servers that will be started, plus the backends it will depends on.

Here are the configuration parameters for this components :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **directoryServiceId** | ads-directoryServiceId | _String_ |  | The unique identifier for the service |
| enabled | ads-enabled | _boolean_  | true | Tells if the DirectoryService is enabled |
| description | description | _String_  | N/A | A short optional description |
| **dsReplicaId** | ads-dsReplicaId | _int_ | 1 | The replication identifier |
| **dsAccessControlEnabled** | ads-dsAccessControlEnabled | _boolean_  | true | Tells if the Access Control interceptor is active |
| **dsAllowAnonymousAccess** | ads-dsAllowAnonymousAccess | _boolean_  | false | Tells if the service allow anonymous access |
| **dsDenormalizeOpAttrsEnabled** | ads-dsDenormalizeOpAttrsEnabled | _boolean_  | true | Tells if the service should denormalize operational attributes |
| **dsPasswordHidden** | ads-dsPasswordHidden | _boolean_  | true | Tells if the passwords should be encrypted (not used) |
| **dsSyncPeriodMillis** | ads-dsSyncPeriodMillis | _long_  | 15000 | The delay in milliseconds before we flush data on disk |
| dsTestEntries | | _String_  | N/A | Not used |


### Change Log

The _ChangeLog_ is an optional system that logs every changes made on the server, and also records the revert operation, allowing the system to rollback the changes if needed. This is extremely useful when running tests.

Note that at the moment, the system works in memory.

It's disabled by default.

Here are the configuration element for the _ChangeLog_ elements :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **changeLogId** | ads-changeLogId | _String_ |  | The unique identifier for the system |
| enabled | ads-enabled | _boolean_  | false | Tells if the ChangeLog system is enabled |
| description | description | _String_  | N/A | A short optional description |
| **changeLogExposed** | ads-changeLogExposed | _boolean_  | false | Tells if the ChangeLog is exposed to the users |

### Journal

The _Journal_ system logs every modification on the file system. It's intended to be used if the _DirectoryService_ crashes, as we can reapply the journal starting from a date in the past where we know that the underlying database is correct.

The configuration elements for the _Journal_ are :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **journalId** | ads-journalId | _String_ | N/A | The unique identifier for the Journal |
| enabled | ads-enabled | _boolean_  | false | Tells if the Journal system is enabled |
| description | description | _String_  | N/A | A short optional description |
| **journalWorkingDir** | ads-journalWorkingDir | _String_ | N/A | The working directory the Journal will be stored in |
| **journalRotation** | ads-journalRotation | _String_ | N/A | The number of operation stored befoe the journal is rotated |
| **journalFileName** | ads-journalFileName | _String_ | journal.txt | The file contaning the Journal |

### Interceptors

The _Interceptors_ are generally not configurable. You don't want to change their order, nor remove or add some. The fact that they appear in the configuration is because we use this to initialize the server.

However, at least one _Interceptor_ can be confiured : the _authenticationInterceptor_. 

In the case where one would like to add an interceptor, it's enough to add the associated entry containing the interceptor identifier, under the _ou=interceptors_ entry. It must have an order. Here are the elements taht can be configured in such a case :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **interceptorId** | ads-interceptorid | _String_ | N/A | The unique identifier for this Interceptor |
| enabled | ads-enabled | _boolean_  | false | Tells if the Interceptor is enabled |
| description | description | _String_  | N/A | A short optional description |
| interceptorOrder | ads-interceptororder | _int_ | N/A | The position in the chain for this interceptor |
| interceptorClassName | ads-interceptorclassname | _String_ | N/A | The class implementing this interceptor |


### Authentication Interceptor

This _Interceptor_ is in charge of managing the users authentication. It is associated with _[Authenticators](#authenticators)_, and with _[Password Policies](#password-policies)_.

### Authenticators

We may have various _Authenticator_ declared for a given server. The default server has three different _Authenticators_, which are :

* anonymousAuthenticator : used for anonymous requests
* simpleAuthenticator : handle simple authentication, based on a password
* strongAuthenticator : handle SASL authentication.

One can add a new _Authenticator_, 

### Password Policies
### Partitions

The _Partition_ is the part of the server storing your data. There are many parts that need to be configured in order to obtain the best performances out of the server. It's also the part of the configuraton you are the more likely to modify, adding new _Partitions_ or adding new _Indexes_.

A _Partition_ have the following configurable elements :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **partitionId** | ads-partitionid | _String_ | N/A | The unique identifier for this Partition |
| enabled | ads-enabled | _boolean_  | false | Tells if the Partition is enabled |
| description | description | _String_  | N/A | A short optional description |
| **suffix** | ads-partitionsuffix | _String_ | N/A | The partition DN |
| contextEntry | ads-contextEntry | _String_ | N/A | The entry associated with the suffix (in LDIF format) |
| partitionSyncOnWrite | ads-partitionSyncOnWrite | _boolean_ | true | Tells the server to flush on disk on each write |

Once those elements have been configured, the _Partition_ is available. You still have to create some mandatory indexes though.

### Indexes

Each _Partition_ have indexes, some are mandatory, and others are user provided. Here are the mandatory indexes :

| Index | role |
|---|---|
| apacheRdn | Stores the RDN for the entry, and the relation to its parent's RDN |
| apachePresence | Used to index the attributeTypes used in the entry |
| apacheOneAlias | Stores the aliases one level below the current entry |
| apacheSubAlias | Stores the aliases below the current entry |
| apacheAlias | Stores the aliases |
| objectClass | Stores the relatio between an ObjectClass an the entry using it |
| entryCSN | Stores the CSN for each entry |
| administrativeRole | Stores the entries that are AdminstrativePoints |


### Indexed Attribute

IndexedATtributes have a type, depending on the _Partition_ they are associetd with. Currently, we have only one type, _JdbmIndex_. They have specific configurable elements.

Each index attribute have four basic elements that can be configured :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **indexAttributeId** | ads-indexAttributeId | _String_ | N/A | The unique identifier for this indexedAttribute |
| enabled | ads-enabled | _boolean_  | false | Tells if the IntexedAttribute is enabled |
| description | description | _String_  | N/A | A short optional description |
| **indexHasReverse** | ads-indexHasReverse | _boolean_ | false | Tells if the IndexedAttribute has a reverse index |

The _JdbmIndex_ type of index has some more configurable elements, all optional :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| indexFileName | ads-indexFileName | _String_ | N/A | The index file name (default to the associated attributeType name) |
| indexWorkingDir | ads-indexWorkingDir | _String_ | N/A | The index working directory |
| indexNumDupLimit | ads-indexNumDupLimit | _int_ | 512 | The maximum number of values for a single key before we use a sub-tree |
| indexCacheSize | ads-indexCacheSize | _int_ | 100 | The numbr of cached pages for this index |


### Servers

As we can see, we can start more than one server. We have :

* a LDAP server
* a Kerberos server
* a changePassword server
* an HTTP Server
* a NTP Server
* a DHCP server
* a DNS server

There is a distinction though between the servers backed by a _DirectoryService_, and those that aren't (like the HTTP and NTP servers). 

All the _DirectoryService_ backed servers share some common parameters, which are exposed in the following table :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| searchBaseDn | ads-searchBaseDN | _Dn_ | N/A | The place were to start looking for authentication informations |
| serverId | ads-serverId | _String_ | N/A | The server unique name |
| enabled | ads-enabled | _boolean_  | N/A | Tells if the Server is enabled |
| description | description | _String_  | N/A | A short optional description |

A server can define more than one transports : for instance, the Kerberos server uses UDP and TCP transports.

### Ldap Server

Let's start with the main server : the LDAP server. 

The list of attributes that can be modified is exposed in the following table. 

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **confidentialityRequired** | ads-confidentialityRequired | _boolean_ | false | Whether or not confidentiality (TLS secured connection) is required |
| **maxSizeLimit** | ads-maxSizeLimit | _int_ | 1000 | The maximum number of entries the server will return |
| **maxTimeLimit** | ads-maxTimeLimit | _int_ | 1000 | The maimum number of seconds the server will use to process a search request |
| **maxPDUSize** | ads-maxPDUSize | _int_ | 2048 | The maximal size for a PDU. This is currently not leveraged |
| **saslHost** | ads-saslHost | _int_ | N/A | The name of this host, validated during SASL negotiation |
| **saslPrincipal** | ads-saslPrincipal | _String_ | N/A | The service principal, used by GSSAPI. |
| **saslRealms** | ads-saslRealms | _List<String>_ | N/A | The list of realms serviced by this host. |
| keystoreFile | ads-keystoreFile | _String_ | N/A | The place on the filesystem where the Keystore is stored |
| certificatePassword | ads-certificatePassword | _String_ | N/A | The certificate's password |
| replReqHandler | ads-replReqHandler | _String_ | (*) | The replication request handler FQCN |
| replEnabled | ads-replEnabled | _boolean_ | FALSE | Tells if the replication system is enabled |

(*) org.apache.directory.server.ldap.replication.provider.SyncReplRequestHandler
	
### Repl Consumers
### Extended Op Handlers
### SASL Mechanisms
### Kerberos Server
### Http Server
### Http Web Apps
### Change Password Server

### Transports

Here are the parameters for the Transport structure :

| Parameter | AttributeType | type | default value | Description |
|---|---|---|---|---|
| **transportId** | ads-transportId | _String_ | N/A | The identification |
| **transportAddress** | ads-transportAddress | _String_ | localhost | The IP Address |
| **systemPort** | ads-systemPort | _int_ | -1 | The port |
| enabled | ads-enabled | _boolean_  | N/A | Tells if the Transport system is enabled |
| description | description | _String_  | N/A | A short optional description |
| transportEnableSsl | ads-transportEnableSsl | _boolean_ | false | Tells if SSL is activated (not used for UDP) |
| transportNbThreads | ads-transportNbThreads | _int_ | 3 | he number of dedicated threads to process the messages |
| transportBackLog | ads-transportBackLog | _int_ | 50 | The number of messages on hold if the server is overloaded (not used for UDP) |
